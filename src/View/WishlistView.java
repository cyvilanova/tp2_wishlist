package View;

import Controller.ItemCategoryController;
import Controller.ItemController;
import Controller.WishlistController;
import Model.Item;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author Thia
 */
public class WishlistView extends javax.swing.JPanel {

    ItemController itemController;
    ItemCategoryController itemCategoryController;
    Integer wishlistId;
    WishlistController wishlistController;
    private final PropertyChangeSupport propChangeSupport = new PropertyChangeSupport(this);

    /**
     * Creates new form WishlistView
     */
    public WishlistView() {
        this.itemController = new ItemController();
        this.itemCategoryController = new ItemCategoryController();
        this.wishlistController = new WishlistController();
        initComponents();
    }

    @Override
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(71, 85, 94));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 824, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     */
    public void displayItems() {

        Integer leftPadding = 300;
        Integer topPadding = 40;

        JButton btnBack = new JButton();
        btnBack.setBackground(Color.decode("#83AAD3"));
        btnBack.setForeground(Color.white);
        btnBack.setText("Back");
        btnBack.setBorderPainted(false);
        btnBack.setSize(100, 25);
        btnBack.setLocation(100, 200);
        add(btnBack);

        btnBack.addActionListener((java.awt.event.ActionEvent evt) -> {
            propChangeSupport.firePropertyChange("btnBack", false, true);
        });

        JLabel wishlistName = new JLabel(wishlistController.getName(wishlistId));
        wishlistName.setBounds(leftPadding, topPadding, 400, 30);
        wishlistName.setOpaque(true);
        wishlistName.setFont(wishlistName.getFont().deriveFont(20.0f));
        wishlistName.setBackground(Color.decode("#47555E"));
        wishlistName.setForeground(Color.white);
        add(wishlistName);

        JLabel wishlistDescription = new JLabel(wishlistController.getDescription(wishlistId));
        wishlistDescription.setBounds(leftPadding, topPadding + 10, 400, 80);
        wishlistDescription.setOpaque(true);
        wishlistDescription.setFont(wishlistDescription.getFont().deriveFont(12.0f));
        wishlistDescription.setBackground(Color.decode("#47555E"));
        wishlistDescription.setForeground(Color.white);
        add(wishlistDescription);

        setLayout(null);

        ArrayList<Item> wishlistItems = itemController.getWishlistItems(wishlistId);

        for (int i = 0; i < wishlistItems.size(); i++) {

            final Integer itemId = wishlistItems.get(i).getId();
            final Item item = wishlistItems.get(i);

            JLabel itemName = new JLabel(item.getName());
            itemName.setBounds(leftPadding, 150 + (i * 70), 400, 30);
            itemName.setOpaque(true);
            itemName.setFont(itemName.getFont().deriveFont(16.0f));
            itemName.setBackground(Color.decode("#47555E"));
            itemName.setForeground(Color.white);
            add(itemName);

            JLabel itemDescription = new JLabel(item.getDescription());
            itemDescription.setBounds(leftPadding, 150 + (i * 70), 400, 30);
            itemDescription.setOpaque(true);
            itemDescription.setFont(itemDescription.getFont().deriveFont(16.0f));
            itemDescription.setBackground(Color.decode("#47555E"));
            itemDescription.setForeground(Color.white);
            add(itemDescription);

            JLabel categoryName = new JLabel(itemCategoryController.getCategoryName(wishlistItems.get(i).getCategoryId()));
            categoryName.setBounds(leftPadding, 170 + (i * 70), 200, 30);
            categoryName.setOpaque(true);
            categoryName.setFont(categoryName.getFont().deriveFont(10.0f));
            categoryName.setBackground(Color.decode("#47555E"));
            categoryName.setForeground(Color.white);
            add(categoryName);

            Double price = item.getPrice();

            if (price != 0) {
                JLabel itemPrice = new JLabel(price + " " + item.getCurrency());
                itemPrice.setBounds(leftPadding, 190 + (i * 70), 400, 30);
                itemPrice.setOpaque(true);
                itemPrice.setFont(itemPrice.getFont().deriveFont(12.0f));
                itemPrice.setBackground(Color.decode("#47555E"));
                itemPrice.setForeground(Color.white);
                add(itemPrice);
            }

            JButton btnDeleteFromWishlist = new JButton();
            btnDeleteFromWishlist.setText("X");
            btnDeleteFromWishlist.setBackground(Color.decode("#83AAD3"));
            btnDeleteFromWishlist.setForeground(Color.white);
            btnDeleteFromWishlist.setBorderPainted(false);
            btnDeleteFromWishlist.setSize(50, 25);
            btnDeleteFromWishlist.setLocation(leftPadding + 440, 165 + (i * 70));
            add(btnDeleteFromWishlist);

            btnDeleteFromWishlist.addActionListener((ActionEvent e) -> {
                itemController.deleteFromWishlist(wishlistId, itemId);
                propChangeSupport.firePropertyChange("btnDeleteItemFromWishlist", false, true);
                removeAll();
                initComponents();
                displayItems();
            });

            String url = item.getLink();
            if (!url.equals("")) {
                JButton btnLink = new JButton();
                btnLink.setText("Link");
                btnLink.setBackground(Color.decode("#83AAD3"));
                btnLink.setForeground(Color.white);
                btnLink.setBorderPainted(false);
                btnLink.setSize(80, 25);
                btnLink.setLocation(leftPadding + 495, 165 + (i * 70));
                add(btnLink);

                btnLink.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            openWebpage(item.getLink());
                        } catch (MalformedURLException ex) {
                            Logger.getLogger(WishlistView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
        }
    }

    public void setWishlistId(Integer wishlistId) {
        this.wishlistId = wishlistId;
    }

    public static boolean openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
            } catch (IOException ex) {
                Logger.getLogger(WishlistView.class.getName()).log(Level.SEVERE, null, ex);
            }
            return true;
        }
        return false;
    }

    public static boolean openWebpage(String urlString) throws MalformedURLException {

        try {
            return openWebpage(new URL(urlString).toURI());
        } catch (URISyntaxException ex) {
            Logger.getLogger(WishlistView.class.getName()).log(Level.SEVERE, null, ex);
        }

        return false;
    }

    public void update() {

        removeAll();
        initComponents();
        displayItems();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
